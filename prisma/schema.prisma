// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique @db.VarChar(255)
  passwordHash      String         @map("password_hash") @db.VarChar(255)
  profile           UserProfile?
  posts             UserPost[]
  likedPosts        LikedPost[]
  dislikedPosts     DislikedPost[]
  initiatorDialogs  Dialog[]       @relation("initiator")
  respondentDialogs Dialog[]       @relation("respondent")
  writerMessages    Message[]      @relation("writer")
  readerMessages    Message[]      @relation("reader")

  @@map("users")
}

model UserProfile {
  id         Int     @id @default(autoincrement())
  userName   String  @map("user_name") @db.VarChar(50)
  aboutMe    String? @map("about_me") @db.VarChar(255)
  avatarPath String? @map("avatar_path")
  userId     Int     @unique @map("user_id")
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserPost {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  title         String         @db.VarChar(50)
  content       String         @db.VarChar(1000)
  likesCount    Int            @default(0) @map("likes_count")
  dislikesCount Int            @default(0) @map("dislikes_count")
  authorId      Int            @map("author_id")
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likedBy       LikedPost[]
  dislikedBy    DislikedPost[]

  @@map("user_posts")
}

model LikedPost {
  userId Int      @map("user_id")
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int      @map("post_id")
  post   UserPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("liked_posts")
}

model DislikedPost {
  userId Int      @map("user_id")
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int      @map("post_id")
  post   UserPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("disliked_posts")
}

model Dialog {
  id           Int       @id @default(autoincrement())
  initiatorId  Int       @map("initiator_id")
  initiator    User      @relation(fields: [initiatorId], references: [id], onDelete: NoAction, name: "initiator")
  respondentId Int       @map("user_id")
  respondent   User      @relation(fields: [respondentId], references: [id], onDelete: NoAction, name: "respondent")
  messages     Message[]

  @@unique([initiatorId, respondentId])
  @@map("dialogs")
}

model Message {
  id        Int      @id @default(autoincrement())
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  dialogId  Int      @map("dialog_id")
  dialog    Dialog   @relation(fields: [dialogId], references: [id], onDelete: Cascade)
  writerId  Int      @map("writer_id")
  writer    User     @relation(fields: [writerId], references: [id], onDelete: NoAction, name: "writer")
  readerId  Int      @map("reader_id")
  reader    User     @relation(fields: [readerId], references: [id], onDelete: NoAction, name: "reader")

  @@map("messages")
}
